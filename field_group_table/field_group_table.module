<?php
/**
 * @file
 * Adds a "Table" format to Field Groups.
 */

define('FIELD_GROUP_TABLE_LABEL_HIDDEN', 1);
define('FIELD_GROUP_TABLE_LABEL_VISIBLE', 2);
define('FIELD_GROUP_TABLE_EMPTY_LABEL_KEEP', 1);
define('FIELD_GROUP_TABLE_EMPTY_LABEL_MERGE', 2);

/**
 * Implements hook_field_group_formatter_info().
 */
function field_group_table_field_group_formatter_info() {
  return array(
    'display' => array(
      'table' => array(
        'label' => t('Table'),
        'description' => t('This fieldgroup renders fields in a 2-column table with the label in the left column, and the value in the right column.'),
        'instance_settings' => array(
          'label_visibility' => FIELD_GROUP_TABLE_LABEL_HIDDEN,
          'desc' => '',
          'first_column' => '',
          'second_column' => '',
          'empty_label_behavior' => FIELD_GROUP_TABLE_EMPTY_LABEL_KEEP,
          'table_row_striping' => FALSE,
          'always_show_field_label' => FALSE,
        ),
      ),
      'list' => array(
        'label' => t('List'),
        'description' => t('This fieldgroup renders fields in a list.'),
      ),
    ),
    'form' => array(
      'table' => array(
        'label' => t('Table'),
        'description' => t('This fieldgroup renders fields in a 2-column table with the label in the left column, and the value in the right column.'),
        'instance_settings' => array(
          'label_visibility' => FIELD_GROUP_TABLE_LABEL_HIDDEN,
          'desc' => '',
          'first_column' => '',
          'second_column' => '',
          'empty_label_behavior' => FIELD_GROUP_TABLE_EMPTY_LABEL_KEEP,
          'table_row_striping' => FALSE,
          'always_show_field_label' => FALSE,
        ),
      ),
    ),
  );
}

/**
 * Implements hook_field_group_format_settings().
 */
function field_group_table_field_group_format_settings($group) {
  // Add a wrapper for extra settings to use by others.
  $form = array(
    'instance_settings' => array(
      '#tree' => TRUE,
      '#weight' => 2,
    ),
  );

  $field_group_types = field_group_formatter_info();
  $mode = $group->mode == 'form' ? 'form' : 'display';
  $formatter = $field_group_types[$mode][$group->format_type];
  $settings = $group->format_settings['instance_settings'];

  // Add optional instance_settings.
  switch ($group->format_type) {
    case 'table':
      $form['instance_settings']['label_visibility'] = array(
        '#title' => t('Show Label'),
        '#type' => 'select',
        '#options' => array(
          FIELD_GROUP_TABLE_LABEL_HIDDEN => t('Hide'),
          FIELD_GROUP_TABLE_LABEL_VISIBLE => t('Show'),
        ),
        '#default_value' => isset($settings['label_visibility']) ? $settings['label_visibility'] : $formatter['instance_settings']['label_visibility'],
      );
      $form['instance_settings']['desc'] = array(
        '#title' => t('Description for the group.'),
        '#type' => 'textarea',
        '#default_value' => isset($settings['desc']) ? $settings['desc'] : $formatter['instance_settings']['desc'],
      );
      $form['instance_settings']['first_column'] = array(
        '#title' => t('First column label'),
        '#type' => 'textfield',
        '#default_value' => isset($settings['first_column']) ? $settings['first_column'] : $formatter['instance_settings']['first_column'],
      );
      $form['instance_settings']['second_column'] = array(
        '#title' => t('Second column label'),
        '#type' => 'textfield',
        '#default_value' => isset($settings['second_column']) ? $settings['second_column'] : $formatter['instance_settings']['second_column'],
      );
      $form['instance_settings']['empty_label_behavior'] = array(
        '#title' => t('Empty cell behavior'),
        '#type' => 'select',
        '#options' => array(
          FIELD_GROUP_TABLE_EMPTY_LABEL_KEEP => t('Keep empty cells'),
          FIELD_GROUP_TABLE_EMPTY_LABEL_MERGE => t('Merge cells')
        ),
        '#default_value' => isset($settings['empty_label_behavior']) ? $settings['empty_label_behavior'] : $formatter['instance_settings']['empty_label_behavior'],
      );
      $form['instance_settings']['table_row_striping'] = array(
        '#title' => t('Table row striping'),
        '#description' => t('Adds zebra striping on the table rows.'),
        '#type' => 'checkbox',
        '#default_value' => isset($settings['table_row_striping']) ? $settings['table_row_striping'] : $formatter['instance_settings']['table_row_striping'],
      );
      $form['instance_settings']['always_show_field_label'] = array(
        '#title' => t('Always show field label'),
        '#description' => t('Forces the field label to always display in the first column and renders the field normally.'),
        '#type' => 'checkbox',
        '#default_value' => isset($settings['always_show_field_label']) ? $settings['always_show_field_label'] : $formatter['instance_settings']['always_show_field_label'],
      );

      break;
  }

  return $form;
}

/**
 * Implements hook_field_group_pre_render().
 */
function field_group_table_field_group_pre_render(&$element, $group, &$form) {
  // You can prepare some variables to use in the logic.
  $view_mode = isset($form['#view_mode']) ? $form['#view_mode'] : 'form';
  $id = $form['#entity_type'] . '_' . $form['#bundle'] . '_' . $view_mode . '_' . $group->group_name;
  $mode = $group->mode == 'form' ? 'form' : 'display';
  $settings = $group->format_settings['instance_settings'];

  // Each formatter type can have whole different set of element properties.
  switch ($group->format_type) {

    // Table format.
    case 'table':
      // Build the caption and description of this group.
      $caption = array();
      if ($settings['label_visibility'] == FIELD_GROUP_TABLE_LABEL_VISIBLE) {
        $caption = array(
          '#type' => 'item',
          '#title' => $group->label,
          '#description' => field_filter_xss($settings['desc']),
        );
      }

      // Build the table header if necessary.
      $header = array();
      if ($settings['first_column'] || $settings['second_column']) {
        $header = array(
          $settings['first_column'],
          $settings['second_column'],
        );
      }

      // Build the table rows.
      $rows = array();
      foreach (element_children($element, TRUE) as $k) {
        $variables = array(
          'element' => $element[$k],
          'settings' => $settings,
          'mode' => $mode,
        );
        unset($element[$k]);

        // Don't add the row when it would display an empty field.
        if ($mode == 'form' || isset($variables['element']['#title'])) {
          $rows[] = _field_group_table_row_build($variables);
        }
      }

      // Create the element.
      $element += array(
        '#theme_wrappers' => array('container'),
        '#weight' => $group->weight,
        '#id' => $id,
        '#attributes' => array(
          'class' => array('field-group-table', $group->group_name),
        ),
        'caption' => $caption,
        'field_group_table' => array(
          '#theme' => 'table',
          '#header' => $header,
          '#rows' => $rows,
          '#attributes' => array(
            'class' => array('field-group-format', $group->group_name),
          ),
        ),
      );

      break;

    case 'list':
      $label = '<h2>' . check_plain(t($group->label)) . '</h2>';
      $element += array(
        '#type' => 'markup',
        '#weight' => $group->weight,
        '#id' => $id,
        '#prefix' => $label . '<ul class="field-group-format ' . $group->group_name . '">',
        '#suffix' => '</ul>',
      );

      foreach (element_children($element) as $k) {
        $element[$k] += array(
          '#prefix' => '<li>',
          '#suffix' => '</li>',
        );
      }
      break;
  }
}

/**
 * Builds a table row for rendering.
 */
function _field_group_table_row_build($variables) {
  // Merge defaults.
  $variables += array(
    'row_class' => array(),
    'content_attributes' => array(),
  );

  $row = array(
    'data' => array(),
    'no_striping' => !$variables['settings']['table_row_striping'],
    'class' => $variables['row_class'],
  );

  switch ($variables['mode']) {
    case 'display':
      // Display the label in the first column, if 'always show field label' is
      // set.
      if ($variables['settings']['always_show_field_label']) {
        $row['data'][] = array(
          'data' => $variables['element']['#title'],
          'header' => TRUE,
          'class' => array('field-label'),
        );
      }
      // Display the label in the first column, if it's set to "above".
      elseif ($variables['element']['#label_display'] == 'above') {
        $row['data'][] = array(
          'data' => $variables['element']['#title'],
          'header' => TRUE,
          'class' => array('field-label'),
        );

        // Do not display the label in the second column.
        $variables['element']['#label_display'] = 'hidden';
      }
      elseif ($variables['settings']['empty_label_behavior'] == FIELD_GROUP_TABLE_EMPTY_LABEL_KEEP) {
        $row['data'][] = array(
          'data' => '&nbsp;',
          'header' => TRUE,
          'class' => array('field-label', 'field-label-hidden'),
        );
      }
      else {
        $variables['content_attributes']['colspan'] = 2;
      }

      break;

    case 'form':
      $class = array('field-label');

      // Attempt to find a title we can use.
      $title = '';
      if (isset($variables['element']['#title'])) {
        $title = $variables['element']['#title'];
        unset($variables['element']['#title']);
      }
      elseif (isset($variables['element']['#language']) && isset($variables['element'][$variables['element']['#language']]['#title'])) {
        $title = $variables['element'][$variables['element']['#language']]['#title'];
        unset($variables['element'][$variables['element']['#language']]['#title']);
      }
      elseif (isset($variables['element']['#language']) && isset($variables['element'][$variables['element']['#language']][0]['#title'])) {
        $title = $variables['element'][$variables['element']['#language']][0]['#title'];
        unset($variables['element'][$variables['element']['#language']][0]['#title']);
      }

      if ($title != '' || ($title == '' && $variables['settings']['empty_label_behavior'] == FIELD_GROUP_TABLE_EMPTY_LABEL_KEEP)) {
        $row['data'][] = array(
          'data' => ($title == '') ? '&nbsp' : $title,
          'header' => TRUE,
          'class' => $class,
        );
      }
      else {
        $variables['content_attributes']['colspan'] = 2;
      }

      break;
  }

  // Add the field's content.
  $row['data'][] = $variables['content_attributes'] + array(
    'data' => $variables['element'],
    'class' => array('field-content'),
  );

  return $row;
}
